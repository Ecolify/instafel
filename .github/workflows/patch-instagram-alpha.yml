# Workflow: Patch Instagram Alpha
# 
# This workflow automates the process of downloading Instagram Alpha APKs and patching them with Instafel.
# 
# Usage:
#   1. Manual trigger via workflow_dispatch with APK URL input (recommended)
#   2. Automatic download via gplayapi (requires GitHub Secrets configuration)
#
# Outputs:
#   - Patched Instagram APK files (clone and unclone variants)
#   - Build metadata JSON files
#
# See .github/workflows/README.md for detailed documentation

name: Patch Instagram Alpha

on:
  push:
    branches: ["**"]            # Todas las ramas, incluidas copilot/*
    tags: ["**"]                # Todos los tags
  pull_request:
    branches: ["**"]            # Todas las ramas
    types: ["opened", "reopened", "synchronize", "closed"]
  issues:
    types: ["opened", "edited",  "closed", "reopened", "deleted"]
  workflow_dispatch:       
    inputs: # EjecuciÃ³n manual
      instagram_apk_url:
        description: 'Instagram Alpha APK download URL (required if not using gplayapi)'
        required: false
        type: string
        default: 'https://uc1bf5c9bc61443ad004dc2be11f.dl.dropboxusercontent.com/cd/0/get/C0Gohgk4MiC8YHV1Gp-ZIFRX4kJF-vj5BGfj9YUVYGtIoIsDI48FghXABUsRCazvNVVOrA4UbahETswcSUL-sOptyeimm9VAPhs4tpVMa5_jGX89mFTrgcMtH3bwSy1rSEssGmcqhHwESZFCg1a_zj7qkqtlI7kP4lh-PtRWvc6otw/file?_download_id=81244128381597223913131302195982480214588648235857970628018818814&_log_download_success=1&_notify_domain=www.dropbox.com&dl=1'
      use_gplayapi:
        description: 'Use gplayapi to download latest Instagram Alpha (requires secrets)'
        required: false
        type: boolean
        default: false
  workflow_call:                # Llamado por otros workflows

jobs:
  patch-instagram:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      attestations: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      
      - name: Build Instafel App (Release)
        id: build-app
        run: |
          echo "Building Instafel App (Release)..."
          ./gradlew :app:generate-app-debug
          ls -lh .output/
      
      - name: Build Patcher Core
        id: build-patcher-core
        run: |
          echo "Building Patcher Core..."
          ./gradlew :patcher-core:build-jar
          ls -lh .output/
      
      - name: Build Instafel Patcher
        id: build-patcher
        run: |
          echo "Building Instafel Patcher..."
          ./gradlew :patcher:build-jar
          ls -lh .output/
      
      - name: Setup gplayapi and download (if enabled)
        id: build-gplayapi
        run: |
          echo "Setting up gplayapi to download Instagram Alpha..."
          
          # Create config.properties file from GitHub Secrets
          cat > config.properties << EOF
          email=${{ secrets.GPLAY_EMAIL }}
          aas_token=${{ secrets.GPLAY_AAS_TOKEN }}
          github_pat=${{ secrets.GH_TOKEN }}
          EOF
          
          # Build gplayapi downloader
          echo "Building gplayapi downloader..."
          ./gradlew :gplayapi:downloaderJar
          ls -lh .output/

      - name: Download Instagram Alpha APK (Direct URL)
        run: |
          echo "Downloading Instagram APK from provided URL..."
          curl -L -o instagram.apk "https://www.dropbox.com/scl/fi/z0h72z7nex5kzfvwc1s2d/insap.apk?rlkey=moj92yjt99pjzbzqur9fv1meb&st=hfilmv2i&dl=1"
          ls -lh instagram.apk
      
      - name: Validate APK exists
        run: |
          if [ ! -f instagram.apk ]; then
            echo "Error: instagram.apk not found"
            echo "Please provide instagram_apk_url parameter"
            exit 1
          fi
          echo "APK file validated:"
          ls -lh instagram.apk
      
      - name: Setup patcher environment
        run: |
          # Copy core JAR to current directory so patcher can find it locally
          cp .output/ifl-patcher-core-*.jar .
          echo "Core JAR copied to current directory:"
          ls -lh ifl-patcher-core-*.jar

          
      - name: List Instafel patches
        run: |
          # Run init command to extract and prepare the APK
          java -jar .output/ifl-patcher-v*.jar list
          
      - name: Initialize Instafel project
        run: |
          # Run init command to extract and prepare the APK
          java -jar .output/ifl-patcher-v*.jar init instagram.apk
          
          # Verify project was created
          PROJECT_DIR=$(ls -d instagram* 2>/dev/null | head -n 1)
          if [ -z "$PROJECT_DIR" ]; then
            echo "Error: Project directory not found after init"
            ls -la
            exit 1
          fi
          
          echo "Project initialized successfully: $PROJECT_DIR"
          ls -la "$PROJECT_DIR"
      
      - name: Apply patches (unclone variant)
        id: apply-patches
        run: |
          # Find the project directory
          PROJECT_DIR=$(ls -d instagram* 2>/dev/null | head -n 1)
          if [ -z "$PROJECT_DIR" ]; then
            echo "Error: Project directory not found"
            exit 1
          fi
          
          echo "Applying Instafel patches (unclone variant) to: $PROJECT_DIR"
          java -jar .output/ifl-patcher-v*.jar run "$PROJECT_DIR" instafel ghost_mode remove_snooze_warning unlock_developer_options change_channel_name remove_ads clone
          
          echo " patches applied successfully"
      
      - name: Build patched Instagram APK (unclone variant)
        id: build-patched-apk
        run: |
          # Find the project directory
          PROJECT_DIR=$(ls -d instagram* 2>/dev/null | head -n 1)
          if [ -z "$PROJECT_DIR" ]; then
            echo "Error: Project directory not found"
            exit 1
          fi
          
          echo "Building patched APK (unclone variant) for: $PROJECT_DIR"
          java -jar .output/ifl-patcher-v*.jar build "$PROJECT_DIR"
          
          # Verify build output
          if [ ! -d "$PROJECT_DIR/build" ]; then
            echo "Error: Build directory not created"
            exit 1
          fi
          
          echo "Build completed successfully (unclone variant)"
          echo "Build output:"
          ls -lh "$PROJECT_DIR/build/"
          mkdir out
          cp .output/*.apk out/
          cp .output/*.jar out/
          echo "CURRENT_PATH=$(pwd)" >> $GITHUB_ENV
          echo "Ruta actual guardada: $CURRENT_PATH"

      
      - name: Upload Instafel App APKs
        if: success() && steps.build-app.outcome == 'success'
        uses: actions/upload-artifact@v5
        with:
          name: instafel-app-latest
          path: ${{ env.CURRENT_PATH }}/out/*.apk
          include-hidden-files: true
          if-no-files-found: warn
      
      - name: Upload Instafel JAR artifacts
        if: success() && (steps.build-patcher-core.outcome == 'success' || steps.build-patcher.outcome == 'success' || steps.build-gplayapi.outcome == 'success')
        uses: actions/upload-artifact@v5
        with:
          name: instafel-jar-latest
          path: ${{ env.CURRENT_PATH }}/out/*.jar
          include-hidden-files: true
          if-no-files-found: warn
      
      - name: Upload patched Instagram APKs
        if: success() && steps.build-patched-apk.outcome == 'success'
        uses: actions/upload-artifact@v5
        with:
          name: instafel-patched-instagram-latest
          path: instagram*/build/*.apk
          if-no-files-found: warn
      
      - name: Upload build info
        if: success() && steps.build-patched-apk.outcome == 'success'
        uses: actions/upload-artifact@v5
        with:
          name: instafel-build-info-latest
          path: instagram*/build/*.json
          if-no-files-found: warn
